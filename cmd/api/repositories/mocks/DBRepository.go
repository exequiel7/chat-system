// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	errors "chat-system/cmd/api/errors"
	context "context"

	gocql "github.com/gocql/gocql"

	mock "github.com/stretchr/testify/mock"

	models "chat-system/cmd/api/models"
)

// DBRepository is an autogenerated mock type for the DBRepository type
type DBRepository struct {
	mock.Mock
}

// GetAllUsers provides a mock function with given fields: ctx
func (_m *DBRepository) GetAllUsers(ctx context.Context) ([]models.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagesBetweenUsers provides a mock function with given fields: ctx, conversationID
func (_m *DBRepository) GetMessagesBetweenUsers(ctx context.Context, conversationID gocql.UUID) ([]models.Message, error) {
	ret := _m.Called(ctx, conversationID)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagesBetweenUsers")
	}

	var r0 []models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, gocql.UUID) ([]models.Message, error)); ok {
		return rf(ctx, conversationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gocql.UUID) []models.Message); ok {
		r0 = rf(ctx, conversationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gocql.UUID) error); ok {
		r1 = rf(ctx, conversationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPassword provides a mock function with given fields: ctx, username
func (_m *DBRepository) GetUserPassword(ctx context.Context, username string) (string, string, errors.ErrAPI) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPassword")
	}

	var r0 string
	var r1 string
	var r2 errors.ErrAPI
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, string, errors.ErrAPI)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) errors.ErrAPI); ok {
		r2 = rf(ctx, username)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(errors.ErrAPI)
		}
	}

	return r0, r1, r2
}

// SaveMessage provides a mock function with given fields: ctx, message
func (_m *DBRepository) SaveMessage(ctx context.Context, message models.Message) error {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for SaveMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUser provides a mock function with given fields: ctx, user
func (_m *DBRepository) SaveUser(ctx context.Context, user models.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for SaveUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserExists provides a mock function with given fields: ctx, username
func (_m *DBRepository) UserExists(ctx context.Context, username string) (bool, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for UserExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDBRepository creates a new instance of DBRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBRepository {
	mock := &DBRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
