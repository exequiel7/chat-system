// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	errors "chat-system/cmd/api/errors"
	context "context"

	gocql "github.com/gocql/gocql"

	mock "github.com/stretchr/testify/mock"

	models "chat-system/cmd/api/models"
)

// MessagingService is an autogenerated mock type for the MessagingService type
type MessagingService struct {
	mock.Mock
}

// GetConversationHistory provides a mock function with given fields: ctx, userID1, userID2
func (_m *MessagingService) GetConversationHistory(ctx context.Context, userID1 gocql.UUID, userID2 gocql.UUID) ([]models.Message, errors.ErrAPI) {
	ret := _m.Called(ctx, userID1, userID2)

	if len(ret) == 0 {
		panic("no return value specified for GetConversationHistory")
	}

	var r0 []models.Message
	var r1 errors.ErrAPI
	if rf, ok := ret.Get(0).(func(context.Context, gocql.UUID, gocql.UUID) ([]models.Message, errors.ErrAPI)); ok {
		return rf(ctx, userID1, userID2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, gocql.UUID, gocql.UUID) []models.Message); ok {
		r0 = rf(ctx, userID1, userID2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, gocql.UUID, gocql.UUID) errors.ErrAPI); ok {
		r1 = rf(ctx, userID1, userID2)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.ErrAPI)
		}
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: ctx, msg
func (_m *MessagingService) SendMessage(ctx context.Context, msg models.Message) errors.ErrAPI {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 errors.ErrAPI
	if rf, ok := ret.Get(0).(func(context.Context, models.Message) errors.ErrAPI); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.ErrAPI)
		}
	}

	return r0
}

// NewMessagingService creates a new instance of MessagingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessagingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessagingService {
	mock := &MessagingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
