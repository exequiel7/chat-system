// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	errors "chat-system/cmd/api/errors"
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "chat-system/cmd/api/models"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// ListUsers provides a mock function with given fields: ctx
func (_m *UserService) ListUsers(ctx context.Context) ([]models.User, errors.ErrAPI) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []models.User
	var r1 errors.ErrAPI
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.User, errors.ErrAPI)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) errors.ErrAPI); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(errors.ErrAPI)
		}
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, user
func (_m *UserService) RegisterUser(ctx context.Context, user models.User) errors.ErrAPI {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 errors.ErrAPI
	if rf, ok := ret.Get(0).(func(context.Context, models.User) errors.ErrAPI); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(errors.ErrAPI)
		}
	}

	return r0
}

// VerifyUserPassword provides a mock function with given fields: ctx, username, password
func (_m *UserService) VerifyUserPassword(ctx context.Context, username string, password string) (string, bool, errors.ErrAPI) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUserPassword")
	}

	var r0 string
	var r1 bool
	var r2 errors.ErrAPI
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, bool, errors.ErrAPI)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) bool); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) errors.ErrAPI); ok {
		r2 = rf(ctx, username, password)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(errors.ErrAPI)
		}
	}

	return r0, r1, r2
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
